openapi: "3.0.2"

info:
  title: Task manager API
  version: 1.0.0
  description: Task manager can work with tasks

servers:
  - url: http://localhost:8021/api
  - url: https://tm.anaxita.ru/api

paths:
  /tasks:
    get:
      summary: "get all tasks"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 12
                    name:
                      type: string
                      example: buy milk
                    status:
                      type: string
                      enum:
                        - not_done
                        - done
                    created_at:
                      type: string
                      format: date-time
                    user_id:
                      type: integer
                      format: int64
                      example: 105
                    project_id:
                      type: integer
                      format: int64
                      example: 10

    post:
      description: Create a new task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 13
                name:
                  type: string
                  example: buy milk
                status:
                  type: string
                  enum:
                    - not_done
                    - done
                created_at:
                  type: string
                  format: date-time
                user_id:
                  type: integer
                  format: int64
                  example: 105
                project_id:
                  type: integer
                  format: int64
                  example: 10

      responses:
        '200':
          description: Successful creation
          content:
            text/plain:
              schema:
                type: string
                example: ''

  /tasks/{id}:
    get:
      description: Get task by ID
      parameters:
        - name: id
          in: query
          schema:
            type: integer
            format: int64
          example: 12
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 12
                    name:
                      type: string
                      example: buy milk
                    status:
                      type: string
                      enum:
                        - not_done
                        - done
                    created_at:
                      type: string
                      format: date-time
                    user_id:
                      type: integer
                      format: int64
                      example: 105
                    project_id:
                      type: integer
                      format: int64
                      example: 10

    put:
      description:  Update status task
      parameters:
        - name: id
          in: query
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: buy milk
                status:
                  type: string
                  example: done
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ''


  /users:
    post:
      description: Registration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: nina@mail.ru
                  format: email
                password:
                  type: string
                  example: 123
                  format: password
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ''

  /login:
    post:
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: nina@mail.ru
                  format: email
                password:
                  type: string
                  example: 123
                  format: password
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ''

  /verification:
    get:
      description: Verification
      parameters:
        - name: code
          in: query
          schema:
            type: string
            format: uuid
          example: '6051edb0-e769-4421-8d03-198255eb89bc'
          required: true
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: 'verification successful, now you can login'

  /projects:
    post:
      description: Create new project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                name:
                  type: string
                  example: go shopping
                created_at:
                  type: string
                  format: date-time
                updated_at:
                  type: string
                  format: data-time
                user_id:
                  type: integer
                  format: int64
                  example: 105

      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ''

    get:
      summary: "Get all projects"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 12
                    name:
                      type: string
                      example: go shopping
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: data-time
                    user_id:
                      type: integer
                      format: int64
                      example: 105

  /projects/{id}:
    get:
      description: Get project by ID
      parameters:
        - name: id
          in: query
          schema:
            type: integer
            format: int64
          example: 6
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 12
                    name:
                      type: string
                      example: go shopping
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: data-time
                    user_id:
                      type: integer
                      format: int64
                      example: 105

    put:
      description: Update name project
      parameters:
        - name: id
          in: query
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: go to school

      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ''

    delete:
      description: Delete project
      parameters:
        - name: id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ''

  /projects/{id}/tasks:
    get:
      description: Get  project tasks
      parameters:
        - name: id
          in: query
          schema:
            type: integer
            format: int64
          example: 12
          required: true
      responses:
        200:
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 12
                      name:
                        type: string
                        example: buy milk
                      status:
                        type: string
                        enum:
                          - not_done
                          - done
                      created_at:
                        type: string
                        format: date-time
                      user_id:
                        type: integer
                        format: int64
                        example: 105
                      project_id:
                        type: integer
                        format: int64
                        example: 10
